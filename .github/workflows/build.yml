name: Build Tauri from Private Repository

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  # Tauri Windows 构建
  build-tauri-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: tianjg-com/SR-Tools
          token: ${{ secrets.SR_TOKEN }}

      - name: Extract version from version.ts
        id: get-version
        run: |
          # 从 version.ts 文件中提取版本号
          if (Test-Path "app/config/version.ts") {
            $versionContent = Get-Content "app/config/version.ts" -Raw
            if ($versionContent -match "export const APP_VERSION = '([^']+)'") {
              $version = $matches[1]
              echo "🎯 检测到版本号: $version"
              echo "version=$version" >> $env:GITHUB_OUTPUT
            } else {
              echo "⚠️ 未能从 version.ts 中提取版本号，使用默认版本"
              echo "version=unknown" >> $env:GITHUB_OUTPUT
            }
          } else {
            echo "❌ version.ts 文件不存在"
            echo "version=unknown" >> $env:GITHUB_OUTPUT
          }

      - name: Display build info
        run: |
          echo "🚀 开始构建 SR-Tools"
          echo "📦 版本号: ${{ steps.get-version.outputs.version }}"
          echo "📅 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          echo "🖥️ 平台: Windows"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci

      - name: Setup Tauri signing key
        run: |
          echo "🔑 设置 Tauri 签名密钥..."
          echo "✅ 使用 GitHub Secrets 中的私钥进行签名"
          echo "✅ 私钥密码已配置"

      - name: Build Tauri app with updater
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          echo "🔧 构建环境信息:"
          echo "  工作目录: ${{ github.workspace }}"
          echo "  使用 GitHub Secrets 中的私钥进行签名"
          
          echo "🚀 开始构建 Tauri 应用..."
          npm run tauri build
          
          echo "📦 检查生成的文件:"
          
          # 检查 MSI 安装包和签名
          if (Test-Path "src-tauri/target/release/bundle/msi/*.msi") {
            echo "✅ MSI 安装包已生成"
            Get-ChildItem "src-tauri/target/release/bundle/msi/*.msi" | ForEach-Object { echo "  - $($_.Name)" }
          }
          
          if (Test-Path "src-tauri/target/release/bundle/msi/*.msi.sig") {
            echo "✅ MSI 更新包签名已生成"
            Get-ChildItem "src-tauri/target/release/bundle/msi/*.msi.sig" | ForEach-Object { echo "  - $($_.Name)" }
          } else {
            echo "❌ MSI 更新包签名未生成"
          }
          
          # 检查 NSIS 安装包和签名
          if (Test-Path "src-tauri/target/release/bundle/nsis/*.exe") {
            echo "✅ NSIS 安装包已生成"
            Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe" | ForEach-Object { echo "  - $($_.Name)" }
          }
          
          if (Test-Path "src-tauri/target/release/bundle/nsis/*.exe.sig") {
            echo "✅ NSIS 更新包签名已生成"
            Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe.sig" | ForEach-Object { echo "  - $($_.Name)" }
          } else {
            echo "❌ NSIS 更新包签名未生成"
          }

      - name: 验证构建产物
        run: |
          echo "检查构建产物..."
          
          # 检查 NSIS 安装包
          $nsisFiles = Get-ChildItem "src-tauri/target/release/bundle/nsis/" -Filter "*.exe" -ErrorAction SilentlyContinue
          if (-not $nsisFiles) {
            echo "❌ NSIS 安装包未找到"
            exit 1
          }
          echo "✅ NSIS 安装包已生成"
          
          # 检查 NSIS 签名文件
          $nsisSigFiles = Get-ChildItem "src-tauri/target/release/bundle/nsis/" -Filter "*.exe.sig" -ErrorAction SilentlyContinue
          if (-not $nsisSigFiles) {
            echo "❌ NSIS 签名文件未找到"
            exit 1
          }
          echo "✅ NSIS 签名文件已生成"

      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // 删除名称以 SR-Tools- 开头的旧构建产物
            const oldArtifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            for (const artifact of oldArtifacts.data.artifacts) {
              if (artifact.name.startsWith('SR-Tools-') && artifact.name !== 'SR-Tools-${{ steps.get-version.outputs.version }}') {
                console.log(`Deleting old artifact: ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.get-version.outputs.version }}
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/nsis/*.exe.sig
          retention-days: 30

      - name: 更新 config.json
        run: |
          echo "🔧 更新 config.json 配置..."

          # 获取当前时间用于更新配置文件（ISO 8601 格式）
          $CURRENT_DATETIME = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")

          # 检查配置文件
          if (-not (Test-Path "tools/config.json")) {
            echo "⚠️ tools/config.json 不存在，跳过配置更新"
            exit 0
          }

          # 读取当前配置
          $configContent = Get-Content "tools/config.json" -Raw | ConvertFrom-Json

          # 更新版本和发布日期
          $configContent.latest.version = "${{ steps.get-version.outputs.version }}"
          $configContent.latest.releaseDate = $CURRENT_DATETIME

          # 更新下载URL和签名
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/v${{ steps.get-version.outputs.version }}/Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe"
          $configContent.latest.platforms.windows.x86_64.url = $downloadUrl

          # 读取签名文件
          $sigPath = "src-tauri/target/release/bundle/nsis/Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe.sig"
          if (Test-Path $sigPath) {
            $signature = Get-Content $sigPath -Raw
            $configContent.latest.platforms.windows.x86_64.signature = $signature.Trim()
            echo "✅ 签名已更新"
          } else {
            echo "⚠️ 签名文件未找到: $sigPath"
          }

          # 保存更新后的配置
          $configContent | ConvertTo-Json -Depth 10 | Set-Content "tools/config.json" -Encoding UTF8
          echo "✅ config.json 更新完成"

          # 显示更新信息
          echo "📋 更新信息:"
          echo "  版本: ${{ steps.get-version.outputs.version }}"
          echo "  发布时间: $CURRENT_DATETIME"
          echo "  下载URL: $downloadUrl"

      - name: 更新 Cloudflare KV 配置
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "🚀 更新 Cloudflare KV 配置..."

          # 检查必要的环境变量
          if ([string]::IsNullOrEmpty($env:CLOUDFLARE_API_TOKEN) -or [string]::IsNullOrEmpty($env:CLOUDFLARE_ACCOUNT_ID)) {
            echo "⚠️ Cloudflare 环境变量未设置，跳过 KV 更新"
            exit 0
          }

          # 检查配置文件
          if (-not (Test-Path "tools/config.json")) {
            echo "⚠️ tools/config.json 不存在，跳过 KV 更新"
            exit 0
          }

          # 安装 wrangler
          npm install -g wrangler

          # 读取并验证配置
          try {
            $configContent = Get-Content "tools/config.json" -Raw | ConvertFrom-Json
            echo "✅ config.json 格式验证通过"
          } catch {
            echo "❌ config.json 格式无效"
            exit 1
          }

          echo "📤 上传配置到 KV..."

          # 更新 KV 配置
          $kvResult = wrangler kv key put "config" --path "tools/config.json" --namespace-id "4083af309c634373b0ceb0adf30311f1" --remote
          if ($LASTEXITCODE -eq 0) {
            echo "✅ KV 配置更新成功!"

            # 验证更新
            $currentConfig = wrangler kv key get "config" --namespace-id "4083af309c634373b0ceb0adf30311f1" --remote 2>$null
            if ($LASTEXITCODE -eq 0 -and $currentConfig) {
              $currentVersion = ($currentConfig | ConvertFrom-Json).latest.version
              echo "✅ KV 配置验证成功! 当前版本: $currentVersion"
            }
          } else {
            echo "❌ KV 配置更新失败"
            exit 1
          }

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: Star Rail Tools v${{ steps.get-version.outputs.version }}
          body: |
            ## 🎮 Star Rail Tools v${{ steps.get-version.outputs.version }}
            
            ### 📦 下载
            - **Windows 安装包**: `Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe`
            
            ### 🔐 文件验证
            - 安装包签名: `Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe.sig`

            ### ⚠️ 注意事项
            - 建议关闭杀毒软件的实时保护以避免误报
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/nsis/Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe
          asset_name: Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Signature
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/nsis/Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe.sig
          asset_name: Star.Rail.Tools_${{ steps.get-version.outputs.version }}_x64-setup.exe.sig
          asset_content_type: text/plain

      # 清理旧的工作流运行记录
      - name: 清理工作流运行历史
        if: success() || failure()
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1  # 只保留最近1次运行记录
