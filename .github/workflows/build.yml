name: Build Tauri from Private Repository

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  # Tauri Windows 构建
  build-tauri-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        repository: tianjg-com/SR-Tools
        token: ${{ secrets.SR_TOKEN }}
    
    - name: Extract version from version.ts
      id: get-version
      run: |
        # 从 version.ts 文件中提取版本号
        if (Test-Path "app/config/version.ts") {
          $versionContent = Get-Content "app/config/version.ts" -Raw
          if ($versionContent -match "export const APP_VERSION = '([^']+)'") {
            $version = $matches[1]
            echo "🎯 检测到版本号: $version"
            echo "version=$version" >> $env:GITHUB_OUTPUT
          } else {
            echo "⚠️ 未能从 version.ts 中提取版本号，使用默认版本"
            echo "version=unknown" >> $env:GITHUB_OUTPUT
          }
        } else {
          echo "❌ version.ts 文件不存在"
          echo "version=unknown" >> $env:GITHUB_OUTPUT
        }
    
    - name: Display build info
      run: |
        echo "🚀 开始构建 SR-Tools"
        echo "📦 版本号: ${{ steps.get-version.outputs.version }}"
        echo "📅 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        echo "🖥️ 平台: Windows"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup Tauri signing key
      run: |
        echo "🔑 设置 Tauri 签名密钥..."
        echo "✅ 使用 GitHub Secrets 中的私钥进行签名"
        echo "✅ 私钥密码已配置"
    
    - name: Build Tauri app with updater
      env:
        TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      run: |
        echo "🔧 构建环境信息:"
        echo "  工作目录: ${{ github.workspace }}"
        echo "  使用 GitHub Secrets 中的私钥进行签名"
        
        echo "🚀 开始构建 Tauri 应用..."
        npm run tauri build
        
        echo "📦 检查生成的文件:"
        
        # 检查 MSI 安装包和签名
        if (Test-Path "src-tauri/target/release/bundle/msi/*.msi") {
          echo "✅ MSI 安装包已生成"
          Get-ChildItem "src-tauri/target/release/bundle/msi/*.msi" | ForEach-Object { echo "  - $($_.Name)" }
        }
        
        if (Test-Path "src-tauri/target/release/bundle/msi/*.msi.sig") {
          echo "✅ MSI 更新包签名已生成"
          Get-ChildItem "src-tauri/target/release/bundle/msi/*.msi.sig" | ForEach-Object { echo "  - $($_.Name)" }
        } else {
          echo "❌ MSI 更新包签名未生成"
        }
        
        # 检查 NSIS 安装包和签名
        if (Test-Path "src-tauri/target/release/bundle/nsis/*.exe") {
          echo "✅ NSIS 安装包已生成"
          Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe" | ForEach-Object { echo "  - $($_.Name)" }
        }
        
        if (Test-Path "src-tauri/target/release/bundle/nsis/*.exe.sig") {
          echo "✅ NSIS 更新包签名已生成"
          Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe.sig" | ForEach-Object { echo "  - $($_.Name)" }
        } else {
          echo "❌ NSIS 更新包签名未生成"
        }
    
    - name: Verify build artifacts
      run: |
        # 检查可执行文件
        if (Test-Path "src-tauri/target/release/tianjg_com.exe") {
          echo "✅ 找到可执行文件: tianjg_com.exe"
        } else {
          echo "❌ 未找到可执行文件"
          exit 1
        }
        
        # 检查更新包签名文件是否存在
        $msiSigFiles = Get-ChildItem "src-tauri/target/release/bundle/msi/" -Filter "*.sig" -ErrorAction SilentlyContinue
        $nsisSigFiles = Get-ChildItem "src-tauri/target/release/bundle/nsis/" -Filter "*.sig" -ErrorAction SilentlyContinue
        
        if ($msiSigFiles -or $nsisSigFiles) {
          echo "✅ 找到更新包签名文件:"
          $msiSigFiles | ForEach-Object { echo "  - MSI: $($_.Name)" }
          $nsisSigFiles | ForEach-Object { echo "  - NSIS: $($_.Name)" }
        } else {
          echo "❌ 未找到更新包签名文件，构建可能失败"
          exit 1
        }
    
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // 删除名称以 SR-Tools- 开头的旧构建产物
          const oldArtifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          for (const artifact of oldArtifacts.data.artifacts) {
            if (artifact.name.startsWith('SR-Tools-') && artifact.name !== 'SR-Tools-${{ steps.get-version.outputs.version }}') {
              console.log(`Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SR-Tools-${{ steps.get-version.outputs.version }}
        path: |
          src-tauri/target/release/tianjg_com.exe
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/msi/*.msi.sig
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/bundle/nsis/*.exe.sig
        retention-days: 30
        overwrite: true

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        name: SR-Tools v${{ steps.get-version.outputs.version }}
        body: |
          🎮 Star Rail Tools v${{ steps.get-version.outputs.version }}
          
          ## 下载
          - Windows 可执行文件: [tianjg_com.exe](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get-version.outputs.version }}/tianjg_com.exe)
          - MSI 安装包: 请查看 Release 附件中的 .msi 文件
          - NSIS 安装包: 请查看 Release 附件中的 .exe 文件
          
          ## 更新内容
          - 自动构建版本 v${{ steps.get-version.outputs.version }}
          - 支持 Tauri 原生更新功能
          - 构建时间: ${{ github.run_id }}
          
          ## 技术信息
          - 包含数字签名的更新包（.msi.sig 和 .exe.sig），支持安全的自动更新
          - 兼容 Tauri v2 更新插件
          - MSI 和 NSIS 安装包可直接用作更新包
          - 需要手动更新 config.json 中的签名和 URL 信息
        files: |
          src-tauri/target/release/tianjg_com.exe
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/msi/*.msi.sig
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/bundle/nsis/*.exe.sig
        draft: false
        prerelease: false

    # 清理旧的工作流运行记录
    - name: 清理工作流运行历史
      if: success() || failure()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 1  # 只保留最近1次运行记录
