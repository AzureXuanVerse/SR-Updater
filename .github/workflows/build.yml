name: Build Tauri from Private Repository

on:
  schedule:
    - cron: '*/30 * * * *'  # 每30分钟检查一次
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  # 检测版本更新
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.version-check.outputs.should-build }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
      main-version: ${{ steps.version-check.outputs.main-version }}
    
    steps:
    - name: Restore version cache
      uses: actions/cache@v4
      with:
        path: last-version.txt
        key: last-built-version-${{ github.repository }}
        restore-keys: |
          last-built-version-
    
    - name: Check latest version from GitLab
      id: version-check
      run: |
        # 获取 GitLab 仓库最新 commit 信息
        LATEST_COMMIT=$(curl -s "https://gitlab.com/api/v4/projects/Dimbreath%2Fturnbasedgamedata/repository/commits?ref_name=main&per_page=1" | jq -r '.[0].title')
        echo "Latest commit title: $LATEST_COMMIT"
        
        # 检查是否包含版本号格式 (OSPRODWin开头)
        if [[ $LATEST_COMMIT =~ ^OSPRODWin([0-9]+\.[0-9]+\.[0-9]+)_D[0-9]+_A[0-9]+_L[0-9]+$ ]]; then
          FULL_VERSION="$LATEST_COMMIT"
          # 提取主版本号 (如 3.6.0)
          MAIN_VERSION="${BASH_REMATCH[1]}"
          echo "Found version: $FULL_VERSION"
          echo "Main version: $MAIN_VERSION"
          echo "latest-version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "main-version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          
          # 读取上次构建的版本
          LAST_VERSION=""
          if [ -f "last-version.txt" ]; then
            LAST_VERSION=$(cat last-version.txt)
            echo "Last built version: $LAST_VERSION"
          else
            echo "No previous version found"
          fi
          
          # 比较版本
          if [ "$FULL_VERSION" != "$LAST_VERSION" ]; then
            echo "New version detected! Building..."
            echo "should-build=true" >> $GITHUB_OUTPUT
            # 保存新版本到缓存
            echo "$FULL_VERSION" > last-version.txt
          else
            echo "Same version as last build, skipping..."
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "No valid version found in latest commit"
          echo "should-build=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Save version cache
      if: steps.version-check.outputs.should-build == 'true'
      uses: actions/cache@v4
      with:
        path: last-version.txt
        key: last-built-version-${{ github.repository }}-${{ steps.version-check.outputs.latest-version }}

  # Tauri Windows 构建
  build-tauri-windows:
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Display version info
      run: |
        echo "🚀 Building for version: ${{ needs.check-version.outputs.main-version }}"
        echo "📅 Build time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    
    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        repository: tianjg-com/SR-Tools
        token: ${{ secrets.SR_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Tauri app
      run: npm run build:tauri
    
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // 删除名称以 SR-Tools- 开头的旧构建产物
          const oldArtifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          for (const artifact of oldArtifacts.data.artifacts) {
            if (artifact.name.startsWith('SR-Tools-') && artifact.name !== 'SR-Tools-${{ needs.check-version.outputs.main-version }}') {
              console.log(`Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }
    
    - name: Upload Tauri artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SR-Tools-${{ needs.check-version.outputs.main-version }}
        path: src-tauri/target/release/bundle/
        retention-days: 30
        overwrite: true
