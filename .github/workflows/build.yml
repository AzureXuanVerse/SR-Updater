name: Build Tauri from Private Repository

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  build-tauri-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: tianjg-com/SR-Tools
          token: ${{ secrets.SR_TOKEN }}

      - name: Setup Node.js and Rust
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri application
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          npm run tauri build
          
          # Verify build artifacts
          if (-not (Test-Path "src-tauri/target/release/bundle/nsis/*.exe")) {
            echo "‚ùå NSIS installer not found"
            exit 1
          }
          if (-not (Test-Path "src-tauri/target/release/bundle/nsis/*.exe.sig")) {
            echo "‚ùå NSIS signature not found"
            exit 1
          }

      - name: Clean old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const oldArtifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            for (const artifact of oldArtifacts.data.artifacts) {
              if (artifact.name.startsWith('SR-Tools-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/nsis/*.exe.sig
          retention-days: 30

      - name: Update config and KV
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Update config.json
          if (-not (Test-Path "tools/config.json")) {
            echo "‚ö†Ô∏è tools/config.json not found, skipping config update"
            exit 0
          }

          $configContent = Get-Content "tools/config.json" -Raw | ConvertFrom-Json
          $installerFile = Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe" | Select-Object -First 1
          $installerName = $installerFile.Name
          $currentDateTime = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          
          # Update config
          $configContent.latest.releaseDate = $currentDateTime
          $configContent.latest.platforms.windows.x86_64.url = "https://github.com/${{ github.repository }}/releases/latest/download/$installerName"
          
          # Update signature
          $sigPath = "src-tauri/target/release/bundle/nsis/$installerName.sig"
          if (Test-Path $sigPath) {
            $signature = Get-Content $sigPath -Raw
            $configContent.latest.platforms.windows.x86_64.signature = $signature.Trim()
          }
          
          $configContent | ConvertTo-Json -Depth 10 | Set-Content "tools/config.json" -Encoding UTF8

          # Update Cloudflare KV
          if ([string]::IsNullOrEmpty($env:CLOUDFLARE_API_TOKEN) -or [string]::IsNullOrEmpty($env:CLOUDFLARE_ACCOUNT_ID)) {
            echo "‚ö†Ô∏è Cloudflare credentials not set, skipping KV update"
            exit 0
          }

          npm install -g wrangler
          wrangler kv key put "config" --path "tools/config.json" --namespace-id "4083af309c634373b0ceb0adf30311f1" --remote

      - name: Create release and upload assets
        run: |
          # Delete and recreate latest release
          gh release delete latest --repo "${{ github.repository }}" --yes || true
          gh release create latest --title "SR-Tools Latest" --notes "## üéÆ SR-Tools" --latest --repo "${{ github.repository }}"
          
          # Upload assets
          $installerFile = Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe" | Select-Object -First 1
          $sigFile = Get-ChildItem "src-tauri/target/release/bundle/nsis/*.exe.sig" | Select-Object -First 1
          
          if ($installerFile) {
            gh release upload latest "$($installerFile.FullName)" --repo "${{ github.repository }}" --clobber
          }
          if ($sigFile) {
            gh release upload latest "$($sigFile.FullName)" --repo "${{ github.repository }}" --clobber
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: success() || failure()
        run: |
          # Clean workflow runs
          $runs = gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[1:][].id'
          foreach ($run in $runs) {
            gh api --method DELETE repos/${{ github.repository }}/actions/runs/$run || true
          }
          
          # Clean old tags
          $tags = gh api repos/${{ github.repository }}/tags --jq '.[].name' | Where-Object { $_ -ne "latest" }
          foreach ($tag in $tags) {
            gh api --method DELETE repos/${{ github.repository }}/git/refs/tags/$tag || true
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
